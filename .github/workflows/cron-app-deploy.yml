name: Deploy Cron-App Lambda

on:
  workflow_dispatch:
  push:
    paths:
      - 'cron-app/**'
      - 'terraform/cron-app.tf'
      - '.github/workflows/cron-app-deploy.yml'

jobs:
  deploy_cron_lambda:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies and package cron-app Lambda
        run: |
          cd cron-app
          pip install -r requirements.txt -t .
          # Remove unnecessary files to reduce package size
          find . -type d -name "__pycache__" -exec rm -rf {} +
          find . -type d -name "*.dist-info" -exec rm -rf {} +
          find . -type d -name "*.egg-info" -exec rm -rf {} +
          # Create zip package
          cd ..
          zip -r cron-app.zip cron-app -x '*.pyc' '*.pyo' '*__pycache__*' 'cron-app/.git/*' 'cron-app/venv/*'

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1

      - name: Terraform Init
        run: |
          cd terraform
          # Use -reconfigure flag to avoid state migration prompts
          terraform init -reconfigure

      - name: Terraform Plan
        run: |
          cd terraform
          # Plan for DynamoDB table (S3 bucket already exists)
          echo "Planning DynamoDB resources..."
          terraform plan \
            -var="acm_certificate_arn=${{ secrets.ACM_CERTIFICATE_ARN }}" \
            -target=aws_s3_bucket_versioning.terraform_state \
            -target=aws_dynamodb_table.terraform_locks
            
          # Then plan for Lambda and EventBridge resources
          echo "\nPlanning Lambda and EventBridge resources..."
          terraform plan \
            -var="acm_certificate_arn=${{ secrets.ACM_CERTIFICATE_ARN }}" \
            -target=aws_iam_role.cron_lambda_exec \
            -target=aws_iam_policy.dynamodb_access \
            -target=aws_iam_role_policy_attachment.cron_lambda_policy \
            -target=aws_iam_role_policy_attachment.cron_dynamodb_policy \
            -target=aws_iam_role_policy_attachment.backend_dynamodb_policy \
            -target=aws_lambda_function.cron_app \
            -target=aws_cloudwatch_event_rule.cron_schedule \
            -target=aws_cloudwatch_event_target.cron_lambda_target \
            -target=aws_lambda_permission.allow_eventbridge \
            -target=aws_cloudwatch_log_group.cron_lambda_logs
        env:
          TF_VAR_aws_region: ap-south-1
          TF_VAR_custom_domain: services.tatkalpro.in

      - name: Terraform Apply
        run: |
          cd terraform
          # Create DynamoDB table (S3 bucket already exists)
          echo "Creating DynamoDB resources..."
          terraform apply -auto-approve \
            -var="acm_certificate_arn=${{ secrets.ACM_CERTIFICATE_ARN }}" \
            -target=aws_s3_bucket_versioning.terraform_state \
            -target=aws_dynamodb_table.terraform_locks
            
          # Then create Lambda and EventBridge resources
          echo "\nCreating Lambda and EventBridge resources..."
          terraform apply -auto-approve \
            -var="acm_certificate_arn=${{ secrets.ACM_CERTIFICATE_ARN }}" \
            -target=aws_iam_role.cron_lambda_exec \
            -target=aws_iam_policy.dynamodb_access \
            -target=aws_iam_role_policy_attachment.cron_lambda_policy \
            -target=aws_iam_role_policy_attachment.cron_dynamodb_policy \
            -target=aws_iam_role_policy_attachment.backend_dynamodb_policy \
            -target=aws_lambda_function.cron_app \
            -target=aws_cloudwatch_event_rule.cron_schedule \
            -target=aws_cloudwatch_event_target.cron_lambda_target \
            -target=aws_lambda_permission.allow_eventbridge \
            -target=aws_cloudwatch_log_group.cron_lambda_logs
        env:
          TF_VAR_aws_region: ap-south-1
          TF_VAR_custom_domain: services.tatkalpro.in

      - name: Verify Deployment
        run: |
          echo "Cron-App Lambda deployment completed"
          echo "\nVerifying S3 bucket:"
          aws s3api head-bucket --bucket train-booking-terraform-state || echo "S3 bucket not found or not accessible"
          
          echo "\nVerifying DynamoDB table:"
          aws dynamodb describe-table --table-name terraform-locks --query 'Table.TableName' || echo "DynamoDB table not found or not accessible"
          
          echo "\nVerifying Lambda function:"
          aws lambda get-function --function-name train-booking-cronjob --query 'Configuration.[FunctionName,LastModified]' || echo "Lambda function not found or not accessible"
          
          echo "\nVerifying EventBridge rule:"
          aws events describe-rule --name train-booking-cronjob-schedule --query 'Name' || echo "EventBridge rule not found or not accessible"
          
          echo "\nDeployment verification complete"
          
          echo "\n----------------------------------------------"
          echo "NEXT STEPS:"
          echo "1. If this was the first successful deployment, uncomment the S3 backend configuration in backend.tf"
          echo "2. Run 'terraform init -migrate-state' to move the state to S3"
          echo "----------------------------------------------"
